local PreloadConstants = {
    PlaceVersionSupport = 4000,
    BypassVersion = "V3",
}

local Success, Error = pcall(function()
    Start = os.clock()
    local NO_HOOKING = false

    local Version = 1.3
    local SubVersion = "beta"
    local Debugging = true
    local Title = "BondoDev"

    local HttpService = game:GetService("HttpService")
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local TweenService = game:GetService("TweenService")
    local VirtualInputManager = Instance.new("VirtualInputManager")
    local VirtualUser = game:GetService("VirtualUser")
    local StarterGui = game:GetService("StarterGui")
    local CoreGui = game:GetService("CoreGui")
    local GuiService = game:GetService("GuiService")
    local CollectionService = game:GetService("CollectionService")
    local UserInputService = game:GetService("UserInputService")
    local Lighting = game:GetService("Lighting")
    local CorePackages = game:GetService("CorePackages")
    local VeryImportantPart = Instance.new("Part")

    local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
    local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
    local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

    local Window = Fluent:CreateWindow({
        Title = Title .. " | Fisch | " .. tostring(Version) .. SubVersion,
        SubTitle = "by BongoDev",
        TabWidth = 160,
        Size = UDim2.fromOffset(580, 460),
        Acrylic = true,
        Theme = "Dark",
        MinimizeKey = Enum.KeyCode.RightControl
    })

    local Tabs = {
        Main = Window:AddTab({ Title = "Main", Icon = "" }),
        Automation = Window:AddTab({ Title = "Automation", Icon = "" }),
        Visuals = Window:AddTab({ Title = "Visuals", Icon = "" }),
        Vulnerabilities = Window:AddTab({ Title = "Vulnerabilities", Icon = "" }),
        Settings = Window:AddTab({ Title = "Settings", Icon = "" }),
    }

    local Options = {}
    local Toggles = {}

    local function GetToggleValue(Name)
        local Toggle = Toggles[Name]
        if not Toggle then
            warn("Toggle not found:", Name)
            return nil
        else
            return Toggle.Value
        end
    end

    local function GetOptionValue(Name)
        local Option = Options[Name]
        if not Option then
            warn("Option not found:", Name)
            return nil
        else
            return Option.Value
        end
    end

    local function ShowNotification(Title, Message, Duration)
        Fluent:Notify({
            Title = Title,
            Content = Message,
            Duration = Duration or 3
        })
    end

    local function GenericToast(Duration, Message, CustomTitle)
        ShowNotification(CustomTitle or Title, Message, Duration)
    end

    do
        VeryImportantPart.Name = "SpawnBox"
        local prio = Instance.new("IntValue", VeryImportantPart)
        prio.Name = "priority"
        prio.Value = 10
        local name = Instance.new("StringValue", VeryImportantPart)
        name.Name = "zonename"
        name.Value = "???"
    end

    local Camera = workspace.CurrentCamera
    local ZoneFishOrigin = nil
    local PreAutoloadConfig = true

    local State = {
        GettingMeteor = false,
        OwnedBoats = {},
        LastToolReset = os.clock(),
        ToolResetCooldown = 5,
    }

    local GlobalStorage = {
        PeakZones = {
            ["Overgrowth Caves"] = true,
            ["Frigid Cavern"] = true,
            ["Cryogenic Canal"] = true,
            ["Glacial Grotto"] = true,
        },
    }

    local LocalPlayer = Players.LocalPlayer
    local Unloaded = false
    local CurrentTool = nil

    if not (hookfunction and hookmetamethod) then
        hookfunction = function(...) end
        hookmetamethod = function(...) end
        NO_HOOKING = true
    end

    if not getconnections then
        getconnections = function(...) end
    end

    if not setthreadidentity then
        setthreadidentity = function(...) end
    end

    if getgenv().sasware_fisch_unload then
        pcall(getgenv().sasware_fisch_unload)
    end

    local function Unimplemented()
        return warn("This feature is not implemented yet")
    end

    local function dbgprint(...)
        if Debugging then
            print("[Debugging]", ...)
        end
    end

    local function dbgwarn(...)
        if Debugging then
            warn("[Debugging]", ...)
        end
    end

    local function WaitForTable(Root, InstancePath, Timeout)
        local Instance = Root
        for i, v in pairs(InstancePath) do
            Instance = Instance:WaitForChild(v, Timeout)
        end
        return Instance
    end

    local function GetFirstAncestorOfClass(Object, Class)
        local Ancestor = Object.Parent
        local Depth = 0
        while Ancestor do
            Depth = Depth + 1
            if Depth > 255 then
                warn("Aborted GetFirstAncestorOfClass: Too deep")
                return nil
            end
            if Ancestor:IsA(Class) then
                return Ancestor
            end
            Ancestor = Ancestor.Parent
        end
        return nil
    end

    local function LockPersistent(Object)
        assert(Object:IsA("Model"), "Object must be a model")
        if Object.ModelStreamingMode ~= Enum.ModelStreamingMode.Persistent then
            CollectionService:AddTag(Object, "ForcePersistent")
            Object:SetAttribute("OldStreamingMode", Object.ModelStreamingMode.Name)
            Object.ModelStreamingMode = Enum.ModelStreamingMode.Persistent
        end
    end

    local function EnsureStream(Root, InstancePath, Position, Timeout)
        LocalPlayer:RequestStreamAroundAsync(Position, Timeout)
        local Target = WaitForTable(Root, InstancePath, Timeout)
        local Model = GetFirstAncestorOfClass(Target, "Model")
        if Model then
            LockPersistent(Model)
        end
        return Target
    end

    local function EnsureInstance(Instance)
        return (Instance and Instance:IsDescendantOf(game))
    end

    local function _round(num, numDecimalPlaces)
        local mult = 10 ^ (numDecimalPlaces or 0)
        return math.floor(num * mult + 0.5) / mult
    end

    local Configuration = {
        CheckSafeRange = 50,
    }

    local Remotes = {
        ReelFinished = ReplicatedStorage.events:WaitForChild("reelfinished "),
        SellAll = ReplicatedStorage.events:WaitForChild("SellAll"),
        Power = EnsureStream(workspace, { "world", "npcs", "Merlin", "Merlin", "power" }, Vector3.new(-930, 226, -993), 5),
        Luck = EnsureStream(workspace, { "world", "npcs", "Merlin", "Merlin", "luck" }, Vector3.new(-930, 226, -993), 5),
    }

    if game.PlaceVersion > PreloadConstants.PlaceVersionSupport then
        local Result = Fluent:Prompt({
            Title = "Warning",
            Content = "SasGuard is unable to load due to the current PlaceVersion being higher than the supported version. This means the anti-cheat will be running. Do you want to continue?",
            Buttons = {
                { Title = "Exit", Callback = function()
                    LocalPlayer:Kick("Aborted due to PlaceVersion being higher than supported version.")
                    game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer)
                end },
                { Title = "Continue", Callback = function() end }
            }
        })
    end

    local Interface = {
        FishRadar = ReplicatedStorage.resources.items.items["Fish Radar"]["Fish Radar"],
        TeleportSpots = WaitForTable(workspace, { "world", "spawns", "TpSpots" }),
        Inventory = WaitForTable(LocalPlayer.PlayerGui, { "hud", "safezone", "backpack" }),
        MeteorItems = workspace:WaitForChild("active"):WaitForChild("meteorItems"),
        PlayerData = workspace:WaitForChild("PlayerStats"):WaitForChild(LocalPlayer.Name):WaitForChild("T"):GetChildren()[1],
        NPCs = workspace:WaitForChild("world"):WaitForChild("npcs"),
        BoatModels = WaitForTable(ReplicatedStorage, { "resources", "replicated", "instances", "vessels" }),
        Active = workspace:WaitForChild("active"),
        ActiveBoats = workspace:WaitForChild("active"):WaitForChild("boats"),
    }

    local Collection = {}
    local OnUnload = Instance.new("BindableEvent")
    local function Collect(Item)
        table.insert(Collection, Item)
    end

    local VelocityFly = loadstring(game:HttpGet("https://raw.githubusercontent.com/centerepic/VelocityFly/main/VelocityFly.lua"))()

    local Utils = {}
    do
        function Utils.CountInstances(Parent, Name)
            local Count = 0
            for _, Instance in next, Parent:GetChildren() do
                if Instance.Name == Name then
                    Count = Count + 1
                end
            end
            return Count
        end

        function Utils.BreakVelocity()
            if LocalPlayer.Character then
                task.spawn(function()
                    for i = 20, 1, -1 do
                        RunService.Heartbeat:Wait()
                        for _, Part in next, LocalPlayer.Character:GetDescendants() do
                            if Part:IsA("BasePart") then
                                Part.Velocity = Vector3.new(0, 0, 0)
                                Part.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                            end
                        end
                    end
                end)
            end
        end

        function Utils.ToggleLocationCC(Value)
            local LocationCC = Lighting:FindFirstChild("location")
            if LocationCC then
                LocationCC.Enabled = Value
            end
        end

        function Utils.GameNotify(Message)
            ReplicatedStorage.events.anno_localthoughtbig:Fire(Message, nil, nil, nil, "Exotic")
        end

        function Utils.GetCharacters()
            local Characters = {}
            for _, Player in next, Players:GetPlayers() do
                if Player.Character then
                    table.insert(Characters, Player.Character)
                end
            end
            return Characters
        end

        function Utils.Net(Type, Index)
            return ReplicatedStorage.packages.Net:FindFirstChild(Type .. "/" .. Index)
        end

        function Utils.Character()
            return LocalPlayer.Character
        end

        function Utils.Humanoid()
            local Character = Utils.Character()
            if Character then
                return Character:FindFirstChildOfClass("Humanoid")
            end
            return nil
        end

        function Utils.CastTo(A, B, Params)
            local Direction = (B - A)
            return workspace:Raycast(A, Direction, Params)
        end

        function Utils.SafePosition(Position, Range)
            local Characters = Utils.GetCharacters()
            local RayParams = RaycastParams.new()
            RayParams.FilterType = Enum.RaycastFilterType.Exclude
            RayParams.RespectCanCollide = true
            RayParams.FilterDescendantsInstances = Characters

            for _, Character in next, Characters do
                local Head = Character:FindFirstChild("Head")
                local Pivot = Character:GetPivot()

                if Head then
                    local Raycast = Utils.CastTo(Position, Head.Position, RayParams)
                    if Raycast then
                        return false
                    end
                end

                if Pivot then
                    local Distance = (Position - Pivot.Position).Magnitude * 0.5
                    if Distance <= Range then
                        return false
                    end
                end
            end
            return true
        end

        function Utils.TP(Target, CheckSafe)
            local Pivot

            if typeof(Target) == "CFrame" then
                Pivot = Target
            elseif typeof(Target) == "Vector3" then
                Pivot = CFrame.new(Target)
            elseif typeof(Target) == "Instance" then
                Pivot = Target:GetPivot()
            elseif typeof(Target) == "BasePart" then
                Pivot = Target:GetPivot()
            elseif typeof(Target) == "Model" then
                Pivot = Target:GetPivot()
            end

            if CheckSafe then
                if not Utils.SafePosition(Pivot.Position, Configuration.CheckSafeRange) then
                    return false
                end
            end

            local Character = Utils.Character()
            if Character then
                Character:PivotTo(Pivot)
                return true
            end
            return false
        end

        function Utils.EliminateVelocity(Model)
            for _, Part in next, Model:GetDescendants() do
                if Part:IsA("BasePart") then
                    Part.Velocity = Vector3.new(0, 0, 0)
                    Part.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                end
            end
            return nil
        end

        function Utils.GenericToast(Duration, Message, CustomTitle)
            GenericToast(Duration, Message, CustomTitle)
        end

        function Utils.GetUsernameMatch(PartialName)
            local BestMatch = nil
            local BestMatchLength = 0
            for _, Player in next, Players:GetPlayers() do
                if string.find(Player.Name:lower(), PartialName:lower()) then
                    if #Player.Name > BestMatchLength then
                        BestMatch = Player
                        BestMatchLength = #Player.Name
                    end
                end
            end
            return BestMatch
        end

        function Utils.CharacterChildAdded(Child)
            if Child:IsA("Tool") then
                CurrentTool = Child
                if GetToggleValue("ServerStresser") then
                    local FishModel = Child:WaitForChild("Fish", 1)
                    if FishModel then
                        FishModel:Destroy()
                    end
                    task.delay(0.5, function()
                        for i, v in next, Child:GetDescendants() do
                            if v:IsA("BasePart") then
                                v.Anchored = true
                            end
                        end
                    end)
                end
            elseif Child:IsA("Humanoid") then
                Collect(Child.StateChanged:Connect(function()
                    if GetToggleValue("ZoneFish") then
                        for _, State in next, Enum.HumanoidStateType:GetEnumItems() do
                            if State ~= Enum.HumanoidStateType.Running then
                                Child:SetStateEnabled(State, false)
                            end
                        end
                        Child:ChangeState(Enum.HumanoidStateType.Running)
                    end
                end))
                Collect(Child.Died:Once(function()
                    Toggles.ZoneFish:Set(false)
                end))
            end
        end

        function Utils.CharacterChildRemoved(Child)
            if Child:IsA("Tool") then
                CurrentTool = nil
            end
        end

        function Utils.CharacterAdded(Character)
            for _, Child in next, Character:GetChildren() do
                Utils.CharacterChildAdded(Child)
            end
            Collect(Character.ChildAdded:Connect(Utils.CharacterChildAdded))
            Collect(Character.ChildRemoved:Connect(Utils.CharacterChildRemoved))

            local Zone = Character:WaitForChild("zone", 1)
            if Zone then
                Collect(RunService.RenderStepped:Connect(function()
                    if GetToggleValue("DisablePeakEffects") then
                        Zone.Value = VeryImportantPart
                    end
                end))
            end
        end

        function Utils.Capitalize(String)
            return string.upper(string.sub(String, 1, 1)) .. string.sub(String, 2)
        end

        function Utils.GetNPC(Type, Single)
            local function GetNPCType(NPC)
                local NPCType = "Unknown"
                if NPC:FindFirstChild("shipwright") then
                    NPCType = "Shipwright"
                elseif NPC:FindFirstChild("merchant") then
                    NPCType = "Merchant"
                elseif NPC:FindFirstChild("angler") then
                    NPCType = "Angler"
                end
                return NPCType
            end

            local NPCs = Interface.NPCs:GetChildren()
            local Results = {}
            for _, Character in next, NPCs do
                local NPCType = GetNPCType(Character)
                if NPCType == Type then
                    if Single then
                        return Character
                    else
                        table.insert(Results, Character)
                    end
                end
            end
            return nil
        end

        function Utils.BoatsChanged()
            local Boats = Interface.PlayerData.Boats:GetChildren()
            State.OwnedBoats = {}
            for _, Boat in next, Boats do
                table.insert(State.OwnedBoats, Boat.Name)
            end
            Options.BoatSpawnDropdown:SetValues(State.OwnedBoats)
        end

        function Utils.UpdateShopDropdown()
            local Items = workspace:WaitForChild("world"):WaitForChild("interactables"):GetChildren()
            local Values = {}
            for _, Item in next, Items do
                table.insert(Values, Item.Name)
            end
            Options.RemoteShopDropdown:SetValues(Values)
        end
    end

    local TeleportLocations = {}
    local TeleportLocations_DropDownValues = {}

    for _, Location in next, Interface.TeleportSpots:GetChildren() do
        TeleportLocations[Utils.Capitalize(Location.Name)] = Location.Position + Vector3.new(0, 6, 0)
    end

    for Name, Position in next, TeleportLocations do
        table.insert(TeleportLocations_DropDownValues, Name)
    end

    table.sort(TeleportLocations_DropDownValues)

    local FishingZones = {}
    for _, Zone in next, workspace:WaitForChild("zones"):WaitForChild("fishing"):GetChildren() do
        if not FishingZones[Zone.Name] then
            FishingZones[Zone.Name] = Zone
        end
    end

    local FishingZones_DropDownValues = {}
    for Name, Zone in next, FishingZones do
        table.insert(FishingZones_DropDownValues, Name)
    end

    local function ResetTool()
        if CurrentTool then
            local ToolCache = LocalPlayer.Character:FindFirstChildOfClass("Tool")
            if CurrentTool then
                if State.LastToolReset + State.ToolResetCooldown < os.clock() then
                    State.LastToolReset = os.clock()
                    LocalPlayer.Character.Humanoid:UnequipTools()
                    task.wait()
                    ToolCache.Parent = LocalPlayer.Character
                end
            end
        end
    end

    local function Unload()
        Fluent:Destroy()
        RunService:Set3dRenderingEnabled(true)
        VelocityFly:Toggle(false)

        for _, Item in ipairs(Collection) do
            if typeof(Item) == "RBXScriptConnection" then
                Item:Disconnect()
            end
            if type(Item) == "thread" then
                coroutine.close(Item)
            end
        end

        local Inventory = WaitForTable(LocalPlayer.PlayerGui, { "hud", "safezone", "backpack" })
        if Inventory then
            Inventory.Visible = true
            StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, false)
        end

        Utils.ToggleLocationCC(true)

        if GetToggleValue("ZoneFish") then
            task.defer(function()
                LocalPlayer.Character.Humanoid:UnequipTools()
                for _ = 1, 10 do
                    task.wait()
                    Utils.TP(ZoneFishOrigin.Position)
                end
                ZoneFishOrigin = nil
            end)
        end

        OnUnload:Fire()
        getgenv().Toggles = nil
        getgenv().Options = nil
        getgenv().sasware_fisch_unload = nil
        GenericToast(3, "Unloaded successfully!")
        Unloaded = true
    end

    getgenv().sasware_fisch_unload = Unload

    do
        if game.PlaceVersion >= 3744 and (game.PlaceVersion <= PreloadConstants.PlaceVersionSupport) then
            local URL = "https://raw.githubusercontent.com/centerepic/sasware-fisch/refs/heads/main/bypasses/" .. PreloadConstants.BypassVersion .. ".luau"
            local Success, Error = pcall(function()
                return loadstring(game:HttpGet(URL))()
            end)
            if not Success then
                LocalPlayer:Kick("Failed to load SasGuard! " .. Error)
            end
        end
    end

    local FishingGroup = Tabs.Main:AddSection("Fishing", 1)

    Toggles.AutoCast = FishingGroup:AddToggle("AutoCast", {
        Title = "Auto-cast",
        Default = false,
        Description = "Automatically casts for you.",
        Callback = function(Value) end
    })

    if not NO_HOOKING then
        Toggles.PerfectCast = FishingGroup:AddToggle("PerfectCast", {
            Title = "Always perfect [Server]",
            Default = false,
            Description = "Makes your casts always perfect.",
            Callback = function(Value) end
        })
    end

    Toggles.InstantBob = FishingGroup:AddToggle("InstantBob", {
        Title = "Instant bob [Blatant]",
        Default = false,
        Description = "Forces the bobber to fall instantly.",
        Callback = function(Value) end
    })

    Toggles.AutoReel = FishingGroup:AddToggle("AutoReel", {
        Title = "Auto-reel [Legit]",
        Default = false,
        Description = "Automatically plays the reel minigame.",
        Callback = function(Value)
            if Value then
                Toggles.InstantReel:Set(false)
            end
        end
    })

    Toggles.InstantReel = FishingGroup:AddToggle("InstantReel", {
        Title = "Insta-reel [Blatant]",
        Default = false,
        Description = "Automatically reels in fish instantly.",
        Callback = function(Value)
            if Value then
                Toggles.AutoReel:Set(false)
            end
        end
    })

    Toggles.PerfectReel = FishingGroup:AddToggle("PerfectReel", {
        Title = "Always perfect",
        Default = false,
        Description = "Reels in fish perfectly!",
        Callback = function(Value) end
    })

    Toggles.AutoShake = FishingGroup:AddToggle("AutoShake", {
        Title = "Auto shake",
        Default = false,
        Description = "Automatically shakes the rod.",
        Callback = function(Value) end
    })

    Toggles.CenterShake = FishingGroup:AddToggle("CenterShake", {
        Title = "Center-shake [Improves AutoShake]",
        Default = false,
        Description = "Centers the shake UI.",
        Callback = function(Value) end
    })

    local TeleportsGroup = Tabs.Main:AddSection("Teleports", 2)

    Options.TeleportsDropdown = TeleportsGroup:AddDropdown("TeleportsDropdown", {
        Title = "Select location",
        Description = "Location to teleport to",
        Values = TeleportLocations_DropDownValues,
        Default = TeleportLocations_DropDownValues[1],
        Multi = false,
        Callback = function(Value) end
    })

    TeleportsGroup:AddButton("Teleport", function()
        local Selected = GetOptionValue("TeleportsDropdown")
        local Position = TeleportLocations[Selected]
        if Position then
            Utils.TP(Position)
        end
    end)

    local UtilitiesGroup = Tabs.Main:AddSection("Utilities", 3)

    if not NO_HOOKING then
        Toggles.FakeFishRadar = UtilitiesGroup:AddToggle("FakeFishRadar", {
            Title = "Fish radar",
            Default = false,
            Description = "A fake clientside fish radar.",
            Callback = function(Value) end
        })
    end

    Toggles.DisablePeakEffects = UtilitiesGroup:AddToggle("DisablePeakEffects", {
        Title = "Disable oxygen/temperature",
        Default = false,
        Description = "Disables peak effects.",
        Callback = function(Value) end
    })

    Toggles.InfiniteOxygen = UtilitiesGroup:AddToggle("InfiniteOxygen", {
        Title = "Infinite oxygen [Water]",
        Default = false,
        Description = "Gives you infinite oxygen.",
        Callback = function(Value) end
    })

    Toggles.AntiAFK = UtilitiesGroup:AddToggle("AntiAFK", {
        Title = "Anti-AFK",
        Default = false,
        Description = "Prevents you from being kicked for being AFK.",
        Callback = function(Value) end
    })

    UtilitiesGroup:AddDivider()
    UtilitiesGroup:AddParagraph("Performance", "")

    Toggles.DestroyFish = UtilitiesGroup:AddToggle("DestroyFish", {
        Title = "No fish models",
        Default = false,
        Description = "Automatically deletes fish models.",
        Callback = function(Value) end
    })

    Toggles.DisableRendering = UtilitiesGroup:AddToggle("DisableRendering", {
        Title = "Disable rendering [+FPS]",
        Default = false,
        Description = "Disables 3D rendering.",
        Callback = function(Value)
            RunService:Set3dRenderingEnabled(not Value)
        end
    })

    Toggles.DisableInventory = UtilitiesGroup:AddToggle("DisableInventory", {
        Title = "Disable custom inventory [+FPS]",
        Default = false,
        Description = "Disables the inventory UI.",
        Callback = function(Value)
            local Inventory = WaitForTable(LocalPlayer.PlayerGui, { "hud", "safezone", "backpack" })
            if Inventory then
                Inventory.Visible = not Value
                StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, Value)
            end
        end
    })

    UtilitiesGroup:AddDivider()
    UtilitiesGroup:AddParagraph("Tools", "")

    Toggles.SpamTool = UtilitiesGroup:AddToggle("SpamTool", {
        Title = "Spam equipped tool",
        Default = false,
        Description = "Spam-activates your equipped tool. [For crates]",
        Callback = function(Value) end
    })

    local ShopGroup = Tabs.Main:AddSection("Remote Shop", 4)

    Options.RemoteShopDropdown = ShopGroup:AddDropdown("RemoteShopDropdown", {
        Title = "Target item",
        Description = "The item you want to buy",
        Values = {},
        Default = "",
        Multi = false,
        Callback = function(Value) end
    })

    ShopGroup:AddButton("Buy Item", function()
        local Selected = GetOptionValue("RemoteShopDropdown")
        local Item = workspace:WaitForChild("world"):WaitForChild("interactables"):FindFirstChild(Selected)
        if Item then
            local Origin = LocalPlayer.Character:GetPivot()
            local LockPositionConnection = RunService.Heartbeat:Connect(function()
                Utils.TP(Item:GetPivot())
            end)
            task.wait(0.3)
            for _, Descendant in next, Item:GetDescendants() do
                if Descendant:IsA("ProximityPrompt") then
                    fireproximityprompt(Descendant)
                    break
                end
            end
            task.wait(0.3)
            LockPositionConnection:Disconnect()
            Utils.TP(Origin.Position)
            Utils.BreakVelocity()
        end
    end)

    ShopGroup:AddDivider()
    ShopGroup:AddParagraph("Merlin", "")

    Options.MerlinAmount = ShopGroup:AddSlider("MerlinAmount", {
        Title = "Item amount",
        Description = "Number of items to buy",
        Default = 1,
        Min = 1,
        Max = 1000,
        Rounding = 0,
        Callback = function(Value) end
    })

    ShopGroup:AddButton("Buy Power", function()
        local Amount = GetOptionValue("MerlinAmount")
        for i = 1, Amount do
            task.spawn(function()
                Remotes.Power:InvokeServer()
            end)
        end
    end)

    ShopGroup:AddButton("Buy Luck", function()
        local Amount = GetOptionValue("MerlinAmount")
        for i = 1, Amount do
            task.spawn(function()
                Remotes.Luck:InvokeServer()
            end)
        end
    end)

    local BoatGroup = Tabs.Main:AddSection("Boat", 5)

    Options.BoatSpawnDropdown = BoatGroup:AddDropdown("BoatSpawnDropdown", {
        Title = "Select boat",
        Description = "Boat to spawn",
        Values = State.OwnedBoats,
        Default = State.OwnedBoats[1] or "",
        Multi = false,
        Callback = function(Value) end
    })

    BoatGroup:AddButton("Remote-Spawn Boat", function()
        Window:Minimize()
        local BoatSpawnLocation = LocalPlayer.Character:GetPivot().Position
        local BoatPreview = nil
        local BoatName = GetOptionValue("BoatSpawnDropdown")
        local ShipwrightNPC = Utils.GetNPC("Shipwright", true)

        if not ShipwrightNPC then
            GenericToast(3, "Shipwright not found.")
            Window:Restore()
            return
        end

        if not BoatName then
            GenericToast(3, "Please select a boat.")
            Window:Restore()
            return
        end

        if Interface.BoatModels:FindFirstChild(BoatName) then
            BoatPreview = Interface.BoatModels:FindFirstChild(BoatName):Clone()
            BoatPreview.Parent = Camera
        else
            BoatPreview = Instance.new("Model")
        end

        for _, Part in next, BoatPreview:GetDescendants() do
            if Part:IsA("BasePart") then
                Part.Anchored = true
                Part.CanCollide = false
                Part.CanTouch = false
            end
        end

        local Origin = LocalPlayer.Character:GetPivot()
        Camera.CameraType = Enum.CameraType.Scriptable

        TweenService:Create(Camera, TweenInfo.new(0.5), {
            CFrame = CFrame.new(Origin.Position + Vector3.new(0, 80, 0), Origin.Position),
        }):Play()

        task.wait(0.5)
        UserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition

        local CameraMotionConnection
        CameraMotionConnection = RunService.RenderStepped:Connect(function()
            local Delta = UserInputService:GetMouseDelta()
            local X, Y = Delta.X, Delta.Y
            Camera.CFrame = Camera.CFrame * CFrame.Angles(0, math.rad(-X * 0.5), 0) * CFrame.Angles(math.rad(-Y * 0.5), 0, 0)

            local Params = RaycastParams.new()
            Params.FilterType = Enum.RaycastFilterType.Exclude
            Params.FilterDescendantsInstances = { LocalPlayer.Character, BoatPreview }

            local CameraHit = workspace:Raycast(Camera.CFrame.Position, Camera.CFrame.LookVector * 500, Params)

            if CameraHit then
                BoatSpawnLocation = CameraHit.Position + Vector3.new(0, 10, 0)
                BoatPreview:PivotTo(CFrame.new(BoatSpawnLocation))
            end
        end)

        local InputConnection
        InputConnection = UserInputService.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                InputConnection:Disconnect()
                CameraMotionConnection:Disconnect()
                Camera.CameraType = Enum.CameraType.Custom
                UserInputService.MouseBehavior = Enum.MouseBehavior.Default

                LocalPlayer.Character:PivotTo(ShipwrightNPC:GetPivot())
                task.wait(0.3)
                fireproximityprompt(ShipwrightNPC.dialogprompt)

                local Result = ShipwrightNPC.shipwright.giveUI:InvokeServer()
                BoatPreview:Destroy()

                if Result then
                    Utils.Net("RF", "Boats/Spawn"):InvokeServer(BoatName)
                    Utils.Net("RE", "Boats/Close"):FireServer()
                    LocalPlayer.PlayerGui.hud.safezone.shipwright.Visible = false

                    repeat
                        task.wait(0.5)
                    until Interface.ActiveBoats:FindFirstChild(LocalPlayer.Name)

                    local Ship = Interface.ActiveBoats:FindFirstChild(LocalPlayer.Name):FindFirstChildOfClass("Model")
                    local Seat = Ship:FindFirstChildOfClass("VehicleSeat")
                    local SitPrompt = Seat:WaitForChild("sitprompt")

                    task.wait(0.5)
                    fireproximityprompt(SitPrompt)
                    task.wait(0.5)

                    for i = 1, 60 do
                        task.wait()
                        Ship:PivotTo(CFrame.new(BoatSpawnLocation))
                    end

                    Ship.PlanePart.Rotation = Vector3.new(0, 0, 0)

                    local WaterRayParams = RaycastParams.new()
                    WaterRayParams.FilterType = Enum.RaycastFilterType.Include
                    WaterRayParams.FilterDescendantsInstances = { workspace.Terrain }
                    WaterRayParams.IgnoreWater = false

                    local WaterHeight = workspace:Raycast(Ship.PlanePart.Position + Vector3.new(0, 100, 0), Vector3.new(0, -255, 0))

                    if WaterHeight then
                        Ship.PlanePart.Position = Ship.PlanePart.Position * Vector3.new(1, 0, 1) + Vector3.new(0, 127, 0)
                    end
                end

                Window:Restore()
            end
        end)
    end)

    local AutomationMiscGroup = Tabs.Automation:AddSection("Enviromental", 1)

    Toggles.AutoMeteor = AutomationMiscGroup:AddToggle("AutoMeteor", {
        Title = "Auto-Meteor",
        Default = false,
        Description = "Automatically grabs item from meteor.",
        Callback = function(Value) end
    })

    local AutomationFishingGroup = Tabs.Automation:AddSection("Fishing", 2)

    Toggles.ZoneFish = AutomationFishingGroup:AddToggle("ZoneFish", {
        Title = "Zone-fish",
        Default = false,
        Description = "Zones fish for you.",
        Callback = function(Value)
            if Value then
                Toggles.InfiniteOxygen:Set(true)
                ZoneFishOrigin = LocalPlayer.Character:GetPivot()
            else
                for _, State in next, Enum.HumanoidStateType:GetEnumItems() do
                    LocalPlayer.Character.Humanoid:SetStateEnabled(State, true)
                end

                if ZoneFishOrigin then
                    LocalPlayer.Character.Humanoid:UnequipTools()
                                        for _ = 1, 10 do
                        task.wait()
                        Utils.TP(ZoneFishOrigin.Position)
                    end
                    ZoneFishOrigin = nil
                end
            end
        end
    })

    Options.ZoneFishDropdown = AutomationFishingGroup:AddDropdown("ZoneFishDropdown", {
        Title = "Select zone",
        Description = "Zone to fish in",
        Values = FishingZones_DropDownValues,
        Default = FishingZones_DropDownValues[1],
        Multi = false,
        Callback = function(Value) end
    })

    local AutomationEconomyGroup = Tabs.Automation:AddSection("Economy", 3)

    Toggles.AutoSell = AutomationEconomyGroup:AddToggle("AutoSell", {
        Title = "Auto-sell",
        Default = false,
        Description = "Automatically sells items.",
        Callback = function(Value) end
    })

    -- Visuals Tab
    local GameVisualsGroup = Tabs.Visuals:AddSection("In-game", 1)

    Toggles.NoLocationCC = GameVisualsGroup:AddToggle("NoLocationCC", {
        Title = "No ambient",
        Default = false,
        Description = "Disables the location Color-Correction.",
        Callback = function(Value) end
    })

    -- Vulnerabilities Tab
    local GameplayDisruptionGroup = Tabs.Vulnerabilities:AddSection("Gameplay Disruption", 1)

    Toggles.ServerStresser = GameplayDisruptionGroup:AddToggle("ServerStresser", {
        Title = "Lag/Crash server",
        Default = false,
        Description = "Spams tools to lag the server.",
        Callback = function(Value)
            if not Value then
                game:GetService("TeleportService"):Teleport(game.PlaceId, LocalPlayer)
            else
                Utils.TP(LocalPlayer.Character:GetPivot().Position + Vector3.new(0, 9e9, 0))
            end
        end
    })

    GameplayDisruptionGroup:AddParagraph("Warning", "The server lagger is irreversible and you will be forced to rejoin if you want to disable it.")

    local VulnGroup = Tabs.Vulnerabilities:AddSection("Vulnerabilities", 2)
    VulnGroup:AddParagraph("Coming Soon", "dupe coming 2025")

    -- Settings Tab
    local MenuGroup = Tabs.Settings:AddSection("Menu", 1)

    MenuGroup:AddButton("Unload", Unload)

    local Keybind = MenuGroup:AddKeybind("MenuKeybind", {
        Title = "Menu bind",
        Mode = "Toggle",
        Default = Enum.KeyCode.RightControl,
        Callback = function(Value)
            Window:Toggle()
        end
    })

    Toggles.Rainbow = MenuGroup:AddToggle("Rainbow", {
        Title = "Rainbow UI",
        Default = false,
        Description = "Rainbow UI colors.",
        Callback = function(Value) end
    })

    Toggles.ShowCustomCursor = MenuGroup:AddToggle("ShowCustomCursor", {
        Title = "Custom Cursor",
        Default = true,
        Description = "Show custom cursor",
        Callback = function(Value) end
    })

    -- Configuração do SaveManager
    SaveManager:SetLibrary(Fluent)
    SaveManager:IgnoreThemeSettings()
    SaveManager:SetIgnoreIndexes({ "MenuKeybind" })
    SaveManager:SetFolder("sasware_fisch/main")

    InterfaceManager:SetLibrary(Fluent)
    InterfaceManager:SetFolder("sasware_fisch")
    InterfaceManager:BuildInterfaceSection(Tabs.Settings)

    SaveManager:BuildConfigSection(Tabs.Settings)

    -- Inicializar hooks
    if not NO_HOOKING then
        local FakeFishRadar = Interface.FishRadar:Clone()
        local FishRadarTool = Instance.new("Tool")

        for _, Child in next, FakeFishRadar:GetChildren() do
            Child.Parent = FishRadarTool
        end

        FakeFishRadar:Destroy()
        FishRadarTool.radar.Enabled = false
        FishRadarTool.radar.ui.UIStroke.Color = Color3.fromRGB(204, 128, 255)
        FishRadarTool.Parent = LocalPlayer.PlayerScripts

        Toggles.FakeFishRadar:OnChanged(function(Value)
            if Value == false and PreAutoloadConfig then
                return
            end

            for _, Connection in next, getconnections(FishRadarTool.Activated) do
                local cf = Connection.Function
                debug.setupvalue(cf, 1, false)

                setthreadidentity(2)
                task.spawn(Connection.Function)
                setthreadidentity(7)
            end

            FishRadarTool.radar.Enabled = true
        end)

        OnUnload.Event:Once(function()
            FishRadarTool:Destroy()
        end)
    end

    local FakeTank = Instance.new("Glue")
    FakeTank.Name = "DivingTank"
    FakeTank:SetAttribute("Tier", 9e9)

    OnUnload.Event:Once(function()
        FakeTank:Destroy()
    end)

    Toggles.InfiniteOxygen:OnChanged(function(Value)
        if Value then
            FakeTank.Parent = LocalPlayer.Character
        else
            FakeTank.Parent = nil
        end
    end)

    setthreadidentity(7)

    Utils.BoatsChanged()

    Collect(workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
        Camera = workspace.CurrentCamera
    end))

    Collect(Interface.PlayerData.Boats.AncestryChanged:Connect(Utils.BoatsChanged))

    Collect(workspace:WaitForChild("active").ChildAdded:Connect(function(Child)
        if Child:IsA("Model") then
            local Fish = Child:WaitForChild("Fish", 1)
            if Fish then
                if GetToggleValue("DestroyFish") then
                    task.wait()
                    Child:Destroy()
                end
            end
        end
    end))

    Collect(Interface.Inventory:GetPropertyChangedSignal("Visible"):Connect(function()
        if GetToggleValue("DisableInventory") and Interface.Inventory.Visible == true then
            task.wait()
            Interface.Inventory.Visible = false
        end
    end))

    Collect(Interface.MeteorItems.ChildAdded:Connect(function(Item)
        if GetToggleValue("AutoMeteor") then
            State.GettingMeteor = true

            local Origin = LocalPlayer.Character:GetPivot()
            local Prompt = WaitForTable(Item, { "Center", "prompt" }, 5)
            local Center = Prompt.Parent

            local TPConnection = RunService.PostSimulation:Connect(function()
                Utils.TP(Center:GetPivot() - (Vector3.yAxis * 5))
            end)

            task.delay(2, function()
                fireproximityprompt(Prompt)
            end)

            task.delay(4, function()
                TPConnection:Disconnect()
                Utils.TP(Origin)
                State.GettingMeteor = false
            end)
        end
    end))

    if not NO_HOOKING then
        local oldindex
        oldindex = hookmetamethod(game, "__index", function(...)
            if not Unloaded then
                if not checkcaller() then
                    local Args = { ... }
                    local self, key = Args[1], Args[2]

                    if self == Interface.Inventory and key == "Visible" then
                        local callingscript = getcallingscript()
                        if callingscript and (not game.IsDescendantOf(callingscript, Interface.Inventory)) then
                            return true
                        end
                    end
                end
            end
            return oldindex(...)
        end)

        local oldnamecall
        oldnamecall = hookmetamethod(game, "__namecall", function(...)
            if not Unloaded then
                if not checkcaller() then
                    local Method = getnamecallmethod()
                    local Args = { ... }
                    local self = table.remove(Args, 1)

                    if Method == "FireServer" then
                        if self == Remotes.ReelFinished then
                            if GetToggleValue("PerfectReel") then
                                Args[1] = 100
                                Args[2] = true
                            end
                        elseif tostring(self) == "cast" then
                            if GetToggleValue("PerfectCast") then
                                Args[1] = 100
                            end
                        end
                        return oldnamecall(self, unpack(Args))
                    end
                end
            end
            return oldnamecall(...)
        end)
    end

    local ShopUpdateCoroutine = coroutine.create(function()
        while task.wait(1) do
            if GetToggleValue("AutoSell") then
                Remotes.SellAll:InvokeServer()
            end
            Utils.UpdateShopDropdown()
        end
    end)

    local AutoClickCoroutine = coroutine.create(function()
        function Utils.MountShakeUI(ShakeUI)
            local SafeZone = ShakeUI:WaitForChild("safezone", 5)

            local function HandleButton(Button)
                Button.Selectable = true
                if EnsureInstance(Button) then
                    GuiService.SelectedObject = Button
                end
            end

            if not SafeZone then
                dbgwarn("Unable to mount shake UI.")
                return
            end

            if GetToggleValue("CenterShake") then
                local Connect = SafeZone:WaitForChild("connect", 1)
                if Connect then
                    Connect.Enabled = false
                end
                SafeZone.Size = UDim2.fromOffset(0, 0)
                SafeZone.Position = UDim2.fromScale(0.5, 0.5)
                SafeZone.AnchorPoint = Vector2.new(0.5, 0.5)
            end

            if GetToggleValue("AutoShake") then
                local Connection = SafeZone.ChildAdded:Connect(function(Child)
                    if not Child:IsA("ImageButton") then return end
                    
                    if replicatesignal then
                        replicatesignal(Child.MouseButton1Click)
                        task.delay(0.05, function() Child:Destroy() end)
                        return
                    end
                    
                    local Done = false
                    task.spawn(function()
                        repeat
                            RunService.Heartbeat:Wait()
                            HandleButton(Child)
                        until Done
                    end)

                    task.spawn(function()
                        repeat
                            RunService.Heartbeat:Wait()
                        until (not Child) or (not Child:IsDescendantOf(SafeZone))
                        Done = true
                    end)
                end)

                if replicatesignal then return end
                
                repeat
                    RunService.Heartbeat:Wait()
                    if GuiService.SelectedObject and GuiService.SelectedObject:IsDescendantOf(SafeZone) then
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                    end
                    RunService.Heartbeat:Wait()
                until not SafeZone:IsDescendantOf(LocalPlayer.PlayerGui)
                Connection:Disconnect()
                GuiService.SelectedObject = nil
            end
        end

        Collect(LocalPlayer.PlayerGui.ChildAdded:Connect(function(Child)
    if Child.Name == "shakeui" and Child:IsA("ScreenGui") then
        Utils.MountShakeUI(Child)
    end
end))  -- ✅ Corrigido: removido 'end' extra e fechado corretamente

local AutoReelCoroutine = coroutine.create(function()
    while true do
        RunService.RenderStepped:Wait()  -- ✅ Corrigido: "Remeretapped" → "RenderStepped"
        local ReelUI = LocalPlayer.PlayerGui:FindFirstChild("reel")  -- ✅ Corrigido: "ReeUI" → "ReelUI", "FindFirstChild" → ":FindFirstChild"


        if GetToggleValue("InstantReel") then
            local Bar = ReelUI:FindFirstChild("bar")  -- ✅ Corrigido: "Bar" → "bar" (minúsculo)
            if Bar then
                local ReelScript = Bar:FindFirstChild("reel")  -- ✅ Corrigido: "Reelscript" → "ReelScript", "reei" → "reel"
                if ReelScript and ReelScript.Enabled == true then
                    Remotes.ReelFinished:FireServer(100, GetToggleValue("PerfectReel"))  -- ✅ Corrigido: "Remote" → "Remotes", "FireServer" → ":FireServer"
                end
            end
        elseif GetToggleValue("AutoReel") then  -- ✅ Corrigido: "elseIf" → "elseif"
            local Bar = ReelUI:FindFirstChild("bar")


                local PlayerBar = Bar:FindFirstChild("playerbar")
                local TargetBar = Bar:FindFirstChild("fish")

                while Bar and ReelUI:IsDescendantOf(LocalPlayer.PlayerGui) do
                    RunService.RenderStepped:Wait()
                    local UnfilteredTargetPosition = PlayerBar.Position:Lerp(TargetBar.Position, 0.7)
                    local TargetPosition = UDim2.fromScale(math.clamp(UnfilteredTargetPosition.X.Scale, 0.15, 0.85), UnfilteredTargetPosition.Y.Scale)
                    PlayerBar.Position = TargetPosition
                end
            end
        end
    end)

    local AutoCastCoroutine = coroutine.create(function()
        local LastCastAttempt = 0
        while task.wait(0.5) do
            if GetToggleValue("AutoCast") then
                pcall(function()
                    if not CurrentTool then return end
                    local Values = CurrentTool:FindFirstChild("values")
                    if CurrentTool and Values then
                        local Events = CurrentTool:FindFirstChild("events")

                        if Values:FindFirstChild("bite") and Values.bite.Value == true and Values.casted.Value == true then
                            if (not LocalPlayer.PlayerGui:FindFirstChild("reel")) and tick() - LastCastAttempt > 5 then
                                ResetTool()
                            end
                        end

                        if Utils.CountInstances(LocalPlayer.PlayerGui, "reel") > 1 then
                            ResetTool()
                            for _, Child in next, LocalPlayer.PlayerGui:GetChildren() do
                                if Child.Name == "reel" then
                                    Child:Destroy()
                                end
                            end
                        end

                        if Values.casted.Value == false then
                            LastCastAttempt = tick()
                            local AnimationFolder = ReplicatedStorage:WaitForChild("resources"):WaitForChild("animations")
                            local CastAnimation = LocalPlayer.Character:FindFirstChild("Humanoid"):LoadAnimation(AnimationFolder.fishing.throw)
                            CastAnimation.Priority = Enum.AnimationPriority.Action3
                            CastAnimation:Play()
                            Events.cast:FireServer(100, 1)

                            CastAnimation.Stopped:Once(function()
                                CastAnimation:Destroy()
                                local WaitingAnimation = LocalPlayer.Character:FindFirstChild("Humanoid"):LoadAnimation(AnimationFolder.fishing.waiting)
                                WaitingAnimation.Priority = Enum.AnimationPriority.Action3
                                WaitingAnimation:Play()

                                local UnequippedLoop, CastConnection
                                CastConnection = Values.casted.Changed:Once(function()
                                    WaitingAnimation:Stop()
                                    WaitingAnimation:Destroy()
                                    if UnequippedLoop then coroutine.close(UnequippedLoop) end
                                end)

                                UnequippedLoop = coroutine.create(function()
                                    repeat task.wait() until not CurrentTool
                                    WaitingAnimation:Stop()
                                    WaitingAnimation:Destroy()
                                    if CastConnection then CastConnection:Disconnect() end
                                end)
                                coroutine.resume(UnequippedLoop)
                            end)
                        end
                    end
                end)
            end
        end
    end)

    local ServerStressCoroutine = coroutine.create(function()
        local Backpack = LocalPlayer.Backpack
        local function IsFish(Tool)
            return Tool:FindFirstChild("fishscript") or (Tool:GetAttribute("IsFish") == true)
        end


            for i, Tool in next, Backpack:GetChildren() do
                task.spawn(function()
                    if IsFish(Tool) then
                        Tool:SetAttribute("IsFish", true)
                        local FishModel = Tool:FindFirstChild("Fish")
                        if FishModel then FishModel:Destroy() end
                        Tool.Parent = LocalPlayer.Character
                    end
                end)
            end
            LocalPlayer.Character.Humanoid:UnequipTools()
        end)
    end)

    Collect(RunService.RenderStepped:Connect(function()
        local Inventory = WaitForTable(LocalPlayer.PlayerGui, { "hud", "safezone", "backpack" })
        if Inventory and Inventory.Visible then
            Inventory.Visible = not GetToggleValue("DisableInventory")
            StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, GetToggleValue("DisableInventory"))
        end

        if GetToggleValue("SpamTool") then
            if CurrentTool then
                for i = 20, 1, -1 do
                    CurrentTool:Activate()
                end
            end
        end

        if GetToggleValue("NoLocationCC") then
            Utils.ToggleLocationCC(false)
        else
            Utils.ToggleLocationCC(true)
        end
    end))

    Collect(RunService.PostSimulation:Connect(function()
        if GetToggleValue("ZoneFish") then
            if State.GettingMeteor then return end

            for _, Part in next, LocalPlayer.Character:GetDescendants() do
                if Part:IsA("BasePart") then
                    Part.CanTouch = false
                    Part.AssemblyLinearVelocity = Vector3.zero
                    Part.AssemblyAngularVelocity = Vector3.zero
                end
            end

            local Zone = FishingZones[GetOptionValue("ZoneFishDropdown")]
            if Zone then
                local Origin = Zone:GetPivot()
                Utils.TP(Origin - Vector3.new(0, 20, 0))

                if CurrentTool then
                    local Bobber = CurrentTool:FindFirstChild("bobber")
                    if Bobber then
                        local Rope = Bobber:FindFirstChildOfClass("RopeConstraint")
                        if Rope then Rope.Length = 9e9 end
                        Bobber:PivotTo(Origin)
                    end
                end
            end
        elseif GetToggleValue("InstantBob") then
            if CurrentTool then
                local Bobber = CurrentTool:FindFirstChild("bobber")
                if Bobber then
                    local Params = RaycastParams.new()
                    Params.FilterType = Enum.RaycastFilterType.Include
                    Params.FilterDescendantsInstances = { workspace.Terrain }
                    local RaycastResult = workspace:Raycast(Bobber.Position, -Vector3.yAxis * 100, Params)
                    if RaycastResult then
                        if RaycastResult.Instance:IsA("Terrain") then
                            Bobber:PivotTo(CFrame.new(RaycastResult.Position))
                        end
                    end
                end
            end
        end
    end))

    Collect(LocalPlayer.Idled:Connect(function()
        if GetToggleValue("AntiAFK") then
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end
    end))

    -- Start coroutines
    coroutine.resume(ServerStressCoroutine)
    coroutine.resume(AutoClickCoroutine)
    coroutine.resume(AutoReelCoroutine)
    coroutine.resume(AutoCastCoroutine)
    coroutine.resume(ShopUpdateCoroutine)
    Collect(ServerStressCoroutine)
    Collect(AutoClickCoroutine)
    Collect(AutoReelCoroutine)
    Collect(AutoCastCoroutine)
    Collect(ShopUpdateCoroutine)

    Collect(LocalPlayer.CharacterAdded:Connect(Utils.CharacterAdded))
    Collect(RunService.RenderStepped:Connect(function()
        if GetToggleValue("Rainbow") then
            Fluent:SetAcrylicColor(Fluent.CurrentRainbowColor)
        end
    end))

    OnUnload.Event:Once(function()
        for _, PersistentModel in next, CollectionService:GetTagged("ForcePersistent") do
            if PersistentModel:GetAttribute("OldStreamingMode") then
                local OldStreamingMode = PersistentModel:GetAttribute("OldStreamingMode")
                PersistentModel.ModelStreamingMode = Enum.ModelStreamingMode[OldStreamingMode]
            else
                PersistentModel.ModelStreamingMode = Enum.ModelStreamingMode.Default
            end
            CollectionService:RemoveTag(PersistentModel, "ForcePersistent")
            PersistentModel:SetAttribute("OldStreamingMode", nil)
        end
    end)

    if LocalPlayer.Character then
        Utils.CharacterAdded(LocalPlayer.Character)
    end

    SaveManager:LoadAutoloadConfig()
    PreAutoloadConfig = false

    Utils.GameNotify("Sasware [Fisch] loaded successfully!")

    -- DONT REMOVE this end remember this is wrapped in a pcall
end)

if not Success then
    warn("Error:", Error)
end
